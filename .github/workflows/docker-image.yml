name: Docker Image CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/myweb

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v4

      # Step 2: Retrieve the latest tag
      - name: Get the latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags `git rev-list --tags --max-count=1`)
          echo "current=${TAG:-v0.0.0}" >> $GITHUB_ENV

      # Step 3: Increment the version
      - name: Increment version
        id: increment_tag
        run: |
          IFS='.' read -r major minor patch <<< "${current#v}"
          patch=$((patch + 1))
          echo "new_tag=v${major}.${minor}.${patch}" >> $GITHUB_ENV
        env:
          current: ${{ env.current }}

      # Step 4: Log in to Docker Hub
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Step 5: Build the Docker image with the new tag
      - name: Build Docker Image
        run: docker build ./BulkyBookWeb --file ./BulkyBookWeb/Dockerfile --tag ${{ env.IMAGE_NAME }}:${{ env.new_tag }}

      # Step 6: Push the Docker image to Docker Hub
      # Step 6: Push the Docker image to Docker Hub
      - name: Push Docker Image
        if: startsWith(github.event.head_commit.message, 'Feat:') || startsWith(github.event.head_commit.message, 'Fix:')
        run: docker push ${{ env.IMAGE_NAME }}:${{ env.new_tag }}


      # Step 7: Create a new Git tag and push it
      - name: Create and push Git tag
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git tag ${{ env.new_tag }}
          git push https://${GH_TOKEN}@github.com/${{ github.repository }} ${{ env.new_tag }}

      # run cypress e2e tests in the cypress e2e folder
      # - name: Run Cypress E2E tests
      #   uses: cypress-io/github-action@v2
      #   with:
      #     build: npm run build
      #     start: npm run start
      #     wait-on: 'http://localhost:5000'
      #     command-prefix: 'npm run'
      #     record: true
      #     recordKey: /*{{ secrets.CYPRESS_RECORD_KEY }}*/
      #     parallel: true
      #     group: 'Docker Image CI'
      #     spec: 'cypress/e2e/*.spec.js'
